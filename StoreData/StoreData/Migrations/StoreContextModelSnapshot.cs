// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StoreData;

namespace StoreData.Migrations
{
    [DbContext(typeof(StoreContext))]
    partial class StoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("StoreData.Models.BranchHours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BranchId");

                    b.Property<int>("CloseTime");

                    b.Property<int>("DayOfTheWeek");

                    b.Property<int>("OpenTime");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("BranchHours");
                });

            modelBuilder.Entity("StoreData.Models.Checkout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Since");

                    b.Property<int>("StoreAssetId");

                    b.Property<int?>("StoreCardId");

                    b.Property<DateTime>("Until");

                    b.HasKey("Id");

                    b.HasIndex("StoreAssetId");

                    b.HasIndex("StoreCardId");

                    b.ToTable("Checkouts");
                });

            modelBuilder.Entity("StoreData.Models.CheckoutHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CheckedIn");

                    b.Property<DateTime>("CheckedOut");

                    b.Property<int>("StoreAssetId");

                    b.Property<int>("StoreCardId");

                    b.HasKey("Id");

                    b.HasIndex("StoreAssetId");

                    b.HasIndex("StoreCardId");

                    b.ToTable("CheckoutHistories");
                });

            modelBuilder.Entity("StoreData.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(30);

                    b.Property<int?>("CustomerCardId");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("FirstName")
                        .HasMaxLength(20);

                    b.Property<int?>("HomeStoreBranchId");

                    b.Property<string>("LastName")
                        .HasMaxLength(20);

                    b.Property<string>("TelephoneNumber");

                    b.HasKey("Id");

                    b.HasIndex("CustomerCardId");

                    b.HasIndex("HomeStoreBranchId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("StoreData.Models.Hold", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("HoldPlaced");

                    b.Property<int?>("StoreAssetId");

                    b.Property<int?>("StoreCardId");

                    b.HasKey("Id");

                    b.HasIndex("StoreAssetId");

                    b.HasIndex("StoreCardId");

                    b.ToTable("Holds");
                });

            modelBuilder.Entity("StoreData.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("StoreData.Models.StoreAsset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Cost");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("ImageUrl");

                    b.Property<int?>("LocationId");

                    b.Property<int>("NumberOfCopies");

                    b.Property<int>("StatusId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("StatusId");

                    b.ToTable("StoreAssets");

                    b.HasDiscriminator<string>("Discriminator").HasValue("StoreAsset");
                });

            modelBuilder.Entity("StoreData.Models.StoreBranch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<string>("Description");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<DateTime>("OpenDate");

                    b.Property<string>("Telephone")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("StoreBranches");
                });

            modelBuilder.Entity("StoreData.Models.StoreCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<decimal>("Fees");

                    b.HasKey("Id");

                    b.ToTable("StoreCards");
                });

            modelBuilder.Entity("StoreData.Models.Music", b =>
                {
                    b.HasBaseType("StoreData.Models.StoreAsset");

                    b.Property<string>("Author")
                        .IsRequired();

                    b.Property<string>("DeweyIndex")
                        .IsRequired();

                    b.Property<string>("ISBN")
                        .IsRequired();

                    b.HasDiscriminator().HasValue("Music");
                });

            modelBuilder.Entity("StoreData.Models.Video", b =>
                {
                    b.HasBaseType("StoreData.Models.StoreAsset");

                    b.Property<string>("Director")
                        .IsRequired();

                    b.HasDiscriminator().HasValue("Video");
                });

            modelBuilder.Entity("StoreData.Models.BranchHours", b =>
                {
                    b.HasOne("StoreData.Models.StoreBranch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId");
                });

            modelBuilder.Entity("StoreData.Models.Checkout", b =>
                {
                    b.HasOne("StoreData.Models.StoreAsset", "StoreAsset")
                        .WithMany()
                        .HasForeignKey("StoreAssetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StoreData.Models.StoreCard", "StoreCard")
                        .WithMany("Checkouts")
                        .HasForeignKey("StoreCardId");
                });

            modelBuilder.Entity("StoreData.Models.CheckoutHistory", b =>
                {
                    b.HasOne("StoreData.Models.StoreAsset", "StoreAsset")
                        .WithMany()
                        .HasForeignKey("StoreAssetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StoreData.Models.StoreCard", "StoreCard")
                        .WithMany()
                        .HasForeignKey("StoreCardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StoreData.Models.Customer", b =>
                {
                    b.HasOne("StoreData.Models.StoreCard", "CustomerCard")
                        .WithMany()
                        .HasForeignKey("CustomerCardId");

                    b.HasOne("StoreData.Models.StoreBranch", "HomeStoreBranch")
                        .WithMany("Customers")
                        .HasForeignKey("HomeStoreBranchId");
                });

            modelBuilder.Entity("StoreData.Models.Hold", b =>
                {
                    b.HasOne("StoreData.Models.StoreAsset", "StoreAsset")
                        .WithMany()
                        .HasForeignKey("StoreAssetId");

                    b.HasOne("StoreData.Models.StoreCard", "StoreCard")
                        .WithMany()
                        .HasForeignKey("StoreCardId");
                });

            modelBuilder.Entity("StoreData.Models.StoreAsset", b =>
                {
                    b.HasOne("StoreData.Models.StoreBranch", "Location")
                        .WithMany("StoreAssets")
                        .HasForeignKey("LocationId");

                    b.HasOne("StoreData.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
